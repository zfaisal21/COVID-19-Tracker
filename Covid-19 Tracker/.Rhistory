sum_waste<-cbind(sum_waste,matrix(c(1:k),ncol=1))
colnames(sum_waste)<-c("Potential_Waste_m3","cluster")
#Tables to join information above and generate df1
data_table <- Reduce(merge, list(df, coverage,sum_waste))
data_table <- data_table[order(data_table$cluster, as.numeric(data_table$Industries)),]
data_table_1 <- aggregate(. ~ cluster + Coverage_meters + Potential_Waste_m3, data_table[,c(1,5,6,7)], toString)
df1<-as.data.frame(center_mass)
colnames(df1) <-c("Latitude", "Longitude", "cluster")
#specific cluster and specific propertie
df_spec_clust <- df1[df1$cluster == Filter1,]
df_spec_prop<-df[df$Industries==Filter2,]
#Color and Icon for map
ai_colors <-c("red","gray","blue","orange","green","beige","darkgreen","lightgreen", "lightred", "darkblue","lightblue",
"purple","darkpurple","pink", "cadetblue","white","darkred", "lightgray","black")
clust_colors <- ai_colors[df$cluster]
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor =  clust_colors)
leafIcons <- icons(
iconUrl = ifelse(df1$Industries,
"https://image.flaticon.com/icons/svg/542/542461.svg"
),
iconWidth = 45, iconHeight = 40,
iconAnchorX = 25, iconAnchorY = 12)
html_legend <- "<img src='https://image.flaticon.com/icons/svg/542/542461.svg'>"
# Map for specific cluster and propertie
if(nrow(df_spec_clust)>0){
clust_colors <- ai_colors[df_spec_clust$cluster]
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor =  clust_colors)
m1<-leaflet(df_spec_clust) %>% addTiles() %>%
addMarkers(~Longitude, ~Latitude, icon = leafIcons) %>%
addAwesomeMarkers(leaflet(df_spec_prop) %>% addTiles(), lat=~df_spec_prop$Latitude, lng = ~df_spec_prop$Longitude, icon= icons,label=~cluster)#%>%
plot1<-m1} else plot1 <- NULL
mydf<- merge(df,df1,by = c("cluster"), suffixes = c("_df","_df1"))
(mydf$distances <- purrr::pmap_dbl(.l = list(mydf$Longitude_df,
mydf$Latitude_df,
mydf$Longitude_df1,
mydf$Latitude_df1),
.f = ~distm(c(..1,..2),c(..3,..4))))
return(list(
"Plot1" = plot1,
"Data" = data_table_1,
"Data1" = data_table,
"Cover" = mydf
))
}
ui <- bootstrapPage(
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
"Cl",
tabPanel("Solution",
sidebarLayout(
sidebarPanel(
tags$b(h3("Choose the cluster number?")),
sliderInput("Slider", h5(""),
min = 2, max = 4, value = 3),
selectInput("Filter1", label = h4("Select just one cluster to show"),""),
selectInput("Filter2",label=h4("Select the cluster property designated above"),""),
h4("Distance is:"),
textOutput("dist"),
),
mainPanel(
tabsetPanel(
tabPanel("Solution", (leafletOutput("Leaf",width = "95%", height = "600"))))),
))))
server <- function(input, output, session) {
Modelcl<-reactive({
function.cl(df,input$Slider,input$Filter1,input$Filter2,input$Filter3)
})
output$Leaf <- renderLeaflet({
Modelcl()[[1]]
})
observeEvent(c(df,input$Slider),{
abc <- req(Modelcl()$Data)
updateSelectInput(session,'Filter1',
choices=c(sort(unique(abc$cluster))))
})
observeEvent(c(df,input$Slider,input$Filter1),{
abc <- req(Modelcl()$Data1) %>% filter(cluster == as.numeric(input$Filter1))
updateSelectInput(session,'Filter2',
choices = unique(abc$Industries))
})
output$dist <- renderText({
cover <- data.frame(Modelcl()[[4]])
cover$distances[cover$cluster == input$Filter1 & cover$Industries == input$Filter2]
})
}
#shinyApp(ui = ui, server = server)
library(shiny)
library(ggplot2)
library(rdist)
library(geosphere)
library(shinythemes)
library(leaflet)
function.cl<-function(df,k,Filter1,Filter2,Filter3){
df<-structure(list(Industries = c(1,2,3,4,5,6),
Latitude = c(-23.8, -23.8, -23.9, -23.7, -23.7,-23.7),
Longitude = c(-49.5, -49.6, -49.7, -49.8, -49.6,-49.9),
Waste = c(526, 350, 526, 469, 534, 346)), class = "data.frame", row.names = c(NA, -6L))
k=3
#clusters
coordinates<-df[c("Latitude","Longitude")]
d<-as.dist(distm(coordinates[,2:1]))
fit.average<-hclust(d,method="average")
clusters<-cutree(fit.average, k)
nclusters<-matrix(table(clusters))
df$cluster <- clusters
#Center of mass
center_mass<-matrix(nrow=k,ncol=2)
for(i in 1:k){
center_mass[i,]<-c(weighted.mean(subset(df,cluster==i)$Latitude,subset(df,cluster==i)$Waste),
weighted.mean(subset(df,cluster==i)$Longitude,subset(df,cluster==i)$Waste))}
coordinates$cluster<-clusters
center_mass<-cbind(center_mass,matrix(c(1:k),ncol=1))
#Coverage
coverage<-matrix(nrow=k,ncol=1)
for(i in 1:k){
aux_dist<-distm(rbind(subset(coordinates,cluster==i),center_mass[i,])[,2:1])
coverage[i,]<-max(aux_dist[nclusters[i,1]+1,])}
coverage<-cbind(coverage,matrix(c(1:k),ncol=1))
colnames(coverage)<-c("Coverage_meters","cluster")
#Sum of Waste from clusters
sum_waste<-matrix(nrow=k,ncol=1)
for(i in 1:k){
sum_waste[i,]<-sum(subset(df,cluster==i)["Waste"])
}
sum_waste<-cbind(sum_waste,matrix(c(1:k),ncol=1))
colnames(sum_waste)<-c("Potential_Waste_m3","cluster")
#Tables to join information above and generate df1
data_table <- Reduce(merge, list(df, coverage,sum_waste))
data_table <- data_table[order(data_table$cluster, as.numeric(data_table$Industries)),]
data_table_1 <- aggregate(. ~ cluster + Coverage_meters + Potential_Waste_m3, data_table[,c(1,5,6,7)], toString)
df1<-as.data.frame(center_mass)
colnames(df1) <-c("Latitude", "Longitude", "cluster")
#specific cluster and specific propertie
df_spec_clust <- df1[df1$cluster == Filter1,]
df_spec_prop<-df[df$Industries==Filter2,]
#Color and Icon for map
ai_colors <-c("red","gray","blue","orange","green","beige","darkgreen","lightgreen", "lightred", "darkblue","lightblue",
"purple","darkpurple","pink", "cadetblue","white","darkred", "lightgray","black")
clust_colors <- ai_colors[df$cluster]
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor =  clust_colors)
leafIcons <- icons(
iconUrl = ifelse(df1$Industries,
"https://image.flaticon.com/icons/svg/542/542461.svg"
),
iconWidth = 45, iconHeight = 40,
iconAnchorX = 25, iconAnchorY = 12)
html_legend <- "<img src='https://image.flaticon.com/icons/svg/542/542461.svg'>"
# Map for specific cluster and propertie
if(nrow(df_spec_clust)>0){
clust_colors <- ai_colors[df_spec_clust$cluster]
icons <- awesomeIcons(
icon = 'ios-close',
iconColor = 'black',
library = 'ion',
markerColor =  clust_colors)
m1<-leaflet(df_spec_clust) %>% addTiles() %>%
addMarkers(~Longitude, ~Latitude, icon = leafIcons) %>%
addAwesomeMarkers(leaflet(df_spec_prop) %>% addTiles(), lat=~df_spec_prop$Latitude, lng = ~df_spec_prop$Longitude, icon= icons,label=~cluster)#%>%
plot1<-m1} else plot1 <- NULL
mydf<- merge(df,df1,by = c("cluster"), suffixes = c("_df","_df1"))
(mydf$distances <- purrr::pmap_dbl(.l = list(mydf$Longitude_df,
mydf$Latitude_df,
mydf$Longitude_df1,
mydf$Latitude_df1),
.f = ~distm(c(..1,..2),c(..3,..4))))
return(list(
"Plot1" = plot1,
"Data" = data_table_1,
"Data1" = data_table,
"Cover" = mydf
))
}
ui <- bootstrapPage(
navbarPage(theme = shinytheme("flatly"), collapsible = TRUE,
"Cl",
tabPanel("Solution",
sidebarLayout(
sidebarPanel(
tags$b(h3("Choose the cluster number?")),
sliderInput("Slider", h5(""),
min = 2, max = 4, value = 3),
selectInput("Filter1", label = h4("Select just one cluster to show"),""),
selectInput("Filter2",label=h4("Select the cluster property designated above"),""),
h4("Distance is:"),
textOutput("dist"),
),
mainPanel(
tabsetPanel(
tabPanel("Solution", (leafletOutput("Leaf",width = "95%", height = "600"))))),
))))
server <- function(input, output, session) {
Modelcl<-reactive({
function.cl(df,input$Slider,input$Filter1,input$Filter2,input$Filter3)
})
output$Leaf <- renderLeaflet({
Modelcl()[[1]]
})
observeEvent(c(df,input$Slider),{
abc <- req(Modelcl()$Data)
updateSelectInput(session,'Filter1',
choices=c(sort(unique(abc$cluster))))
})
observeEvent(c(df,input$Slider,input$Filter1),{
abc <- req(Modelcl()$Data1) %>% filter(cluster == as.numeric(input$Filter1))
updateSelectInput(session,'Filter2',
choices = unique(abc$Industries))
})
output$dist <- renderText({
cover <- data.frame(Modelcl()[[4]])
cover$distances[cover$cluster == input$Filter1 & cover$Industries == input$Filter2]
})
}
#shinyApp(ui = ui, server = server)
devtools::install_github("rtelmore/RDSTK")
install.packages(c('devtools','curl'))
library('devtools')
devtools::install_github("rtelmore/RDSTK")
library(RDSTK)
library(dplyr)
read.csv("C:\\Users\\Asus\\OneDrive\\Desktop\\COVID19\\File Name.csv")
read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/File Name.csv")
Modelcl<-reactive({
function.cl(df,input$Slider,input$Filter1,input$Filter2,input$Filter3)
})
output$Leaf <- renderLeaflet({
Modelcl()[[1]]
})
view(c)
c <-- read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/File Name.csv", header = TRUE)
view(c)
c <- read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/File Name.csv", header = TRUE)
<- read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/File Name.csv", header = TRUE)
view(c)
c <- read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/Book1.csv", header = TRUE)
view(c)
c <- read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/swasta.csv", header = TRUE)
view(c)
devtools::install_github("rtelmore/RDSTK")
view(c)
linstall.packages(c('devtools','curl'))
library('devtools')
ibrary(RDSTK)
library(dplyr)
devtools::install_github("rtelmore/RDSTK")
c <- read.csv('C:\Users\Asus\OneDrive\Desktop\COVID19\swasta.csv')
view(c)
linstall.packages(c('devtools','curl'))
library('devtools')
ibrary(RDSTK)
library(dplyr)
devtools::install_github("rtelmore/RDSTK")
c <- read.csv('C:\Users\Asus\OneDrive\Desktop\COVID19\swasta.csv')
view(c)
read.csv("C:\Users\Asus\OneDrive\Desktop\COVID19\swasta.csv")
view(c)
shiny::runApp('covid19')
Book1 <- read.csv("C:/Users/Asus/OneDrive/Desktop/COVID19/Book1.csv")
View(Book1)
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/Finalized Project/app-Daniel&liyana.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/Finalized Project/app-Daniel&liyana.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/Finalized Project/app-Daniel&liyana.R')
library(shiny)
library(shinythemes)
library(ggplot2)
library(dplyr)
library(ggiraph)
library(leaflet)
install.packages(ggiraph)
install.packages(leaflet)
# Load R packages
install.packages('ggiraph')
install.packages('leaflet')
# Install R packages
# install.packages('shiny')
# install.packages('shinythemes')
# install.packages('ggplot2')
# install.packages('dplyr')
# install.packages('ggiraph')
# install.packages('ggiraph')
# install.packages('leaflet')
# Load R packages
library(shiny)
library(shinythemes)
library(ggplot2)
library(dplyr)
library(ggiraph)
library(leaflet)
data <-read.csv("C:Users/Asus/OneDrive/Desktop/COVID19/ActiveCases.csv", header = TRUE, sep = ",")
fdata <- read.csv("C:Users/Asus/OneDrive/Desktop/COVID19/GovernHospTreatCOVID19.csv", header = TRUE, sep = ",")
r_colors <- rgb(t(col2rgb(colors()) / 255))
names(r_colors) <- colors()
# Define UI
ui <- fluidPage(theme = shinytheme("superhero"),
navbarPage("COVID-19",
tabPanel("COVID-19 Information",
titlePanel("How danger COVID-19 is ?"),
h3('Covid 19'),
h4('jangan mkn nasi ayam')
)
, # Navbar 1, tabPanel
########################## symptom checker part ##########################
tabPanel("Symptom Checker", sidebarPanel(
tags$h3("Input:"),
textInput("txt1", "Given Name:", ""),
textInput("txt2", "Surname:", "")
),# sidebarPanel
mainPanel(
h1("Patient details"),
h4("Your Name"),
verbatimTextOutput("txtout")
)),
########################## Map - Screening ##########################
tabPanel("Map - Screening",
leafletOutput("mymap"),
p(),
actionButton("recalc", "New points")
),
########################## Active Cases ##########################
tabPanel("Active Cases - Interstates",
basicPage(
DT::dataTableOutput("climatetableCity"))),
########################## Interstates comparison ##########################
tabPanel("Interstates Comparison", "Azim figure out k",
#####padam
selectInput("outlook", label = "Outlook:",
choices = list("Sunny" = "sunny", "Overcast" = "overcast", "Rainy" = "rainy"),
selected = "Rainy"),
sliderInput("temperature", "Temperature:",
min = 64, max = 86,
value = 70),
sliderInput("humidity", "Humidity:",
min = 65, max = 96,
value = 90),
selectInput("windy", label = "Windy:",
choices = list("Yes" = "TRUE", "No" = "FALSE"),
selected = "TRUE"),
actionButton("submitbutton", "Submit", class = "btn btn-primary"))
) # navbarPage
) # fluidPage
# Define server function
server <- function(input, output) {
####### output Symptom checker start #######
output$txtout <- renderText({
paste( input$txt1, input$txt2, sep = " " )
})
####### output Symptom checker end #######
#Danielmap
points <- eventReactive(input$recalc, {
cbind(rnorm(40) * 2 + 13, rnorm(40) + 48)
}, ignoreNULL = FALSE)
template_pop_up <-  tags$dl(class = "dl-horizontal",
tags$dt("Name: "), tags$dd("%s"),
tags$dt("Address:"), tags$dd("%s"),
tags$dt("District:"), tags$dd("%s"),
tags$dt("State:"), tags$dd("%s"),
tags$dt("Tel:"), tags$dd("%s")) %>% paste()
popup_info <- sprintf(template_pop_up,
fdata[["Name"]],
fdata[["Address"]],
fdata[["District"]],
fdata[["State"]],
fdata[["Tel"]])
getColor <- function(df) {
sapply(df$Type, function(x) {
if(x == 1) {
"lightblue"
}else{"blue"}
})
}
icons <- awesomeIcons(
icon = 'fa-blank',
library = 'fa',
iconColor = 'white',
markerColor = getColor(fdata)
)
output$mymap <- renderLeaflet({
leaflet() %>%
addProviderTiles(providers$Stamen.TonerLite,
options = providerTileOptions(noWrap = TRUE)
) %>%
addAwesomeMarkers(fdata$longitude, fdata$latitude, icon = icons, popup = popup_info)
})
# Active Cases- Interstates
output$climatetableCity = DT::renderDataTable({
data
})
} # server
# Create Shiny object
shinyApp(ui = ui, server = server)
library(shiny); runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
runApp('fessal.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
runApp('C:/Users/Asus/OneDrive/Desktop/COVID19/3rdwave/fessal.R')
library(shiny); runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
library(shiny); runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
library(shiny); runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
runApp('fessal.R')
runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
# Install R packages
# install.packages('shiny')
# install.packages('shinythemes')
install.packages('ggplot2')
runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
library(shiny); runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
library(shiny); runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
# Install R packages
# install.packages('shiny')
# install.packages("rlang")
# install.packages('shinythemes')
# install.packages('ggplot2')
# install.packages('dplyr')
# install.packages('ggiraph')
# install.packages('ggiraph')
# install.packages('leaflet')
remove.packages("ggplot2")
# install.packages('data.table')
# install.packages('RCurl')
# install.packages('randomForest')
# Load R packages
# install.packages("installr")
# library(installr)
# updateR()
library(mosaic)
install.packages('mosaic')
runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
library(shiny); runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
runApp('C:/Users/Asus/Downloads/3rdwave COVID19/3rdwave COVID19/fessal.R')
library(shiny); runApp('fessal.R')
setwd("~/Desktop/finalize-Project WQD7001-1/3rdwave COVID19")
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
setwd("~/Desktop/finalize-Project WQD7001-1/3rdwave COVID19")
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
library(shiny); runApp('fessal.R')
library(shiny); runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
runApp('fessal.R')
shiny::runApp()
shiny::runApp()
runApp()
